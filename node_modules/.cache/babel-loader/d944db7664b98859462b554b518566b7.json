{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\dikra\\\\Downloads\\\\paper-dashboard-react-main\\\\paper-dashboard-react-main\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\toConsumableArray.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapDataUsingRowHeights = void 0;\n\nvar wrapCell_1 = require(\"./wrapCell\");\n\nvar createEmptyStrings = function createEmptyStrings(length) {\n  return new Array(length).fill('');\n};\n\nvar padCellVertically = function padCellVertically(lines, rowHeight, columnConfig) {\n  var verticalAlignment = columnConfig.verticalAlignment;\n  var availableLines = rowHeight - lines.length;\n\n  if (verticalAlignment === 'top') {\n    return [].concat(_toConsumableArray(lines), _toConsumableArray(createEmptyStrings(availableLines)));\n  }\n\n  if (verticalAlignment === 'bottom') {\n    return [].concat(_toConsumableArray(createEmptyStrings(availableLines)), _toConsumableArray(lines));\n  }\n\n  return [].concat(_toConsumableArray(createEmptyStrings(Math.floor(availableLines / 2))), _toConsumableArray(lines), _toConsumableArray(createEmptyStrings(Math.ceil(availableLines / 2))));\n};\n\nvar flatten = function flatten(array) {\n  var _ref;\n\n  return (_ref = []).concat.apply(_ref, _toConsumableArray(array));\n};\n\nvar mapDataUsingRowHeights = function mapDataUsingRowHeights(unmappedRows, rowHeights, config) {\n  var tableWidth = unmappedRows[0].length;\n  var mappedRows = unmappedRows.map(function (unmappedRow, unmappedRowIndex) {\n    var outputRowHeight = rowHeights[unmappedRowIndex];\n    var outputRow = Array.from({\n      length: outputRowHeight\n    }, function () {\n      return new Array(tableWidth).fill('');\n    });\n    unmappedRow.forEach(function (cell, cellIndex) {\n      var cellLines = (0, wrapCell_1.wrapCell)(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n      var paddedCellLines = padCellVertically(cellLines, outputRowHeight, config.columns[cellIndex]);\n      paddedCellLines.forEach(function (cellLine, cellLineIndex) {\n        outputRow[cellLineIndex][cellIndex] = cellLine;\n      });\n    });\n    return outputRow;\n  });\n  return flatten(mappedRows);\n};\n\nexports.mapDataUsingRowHeights = mapDataUsingRowHeights;","map":{"version":3,"sources":["C:/Users/dikra/Downloads/paper-dashboard-react-main/paper-dashboard-react-main/node_modules/table/dist/src/mapDataUsingRowHeights.js"],"names":["Object","defineProperty","exports","value","mapDataUsingRowHeights","wrapCell_1","require","createEmptyStrings","length","Array","fill","padCellVertically","lines","rowHeight","columnConfig","verticalAlignment","availableLines","Math","floor","ceil","flatten","array","concat","unmappedRows","rowHeights","config","tableWidth","mappedRows","map","unmappedRow","unmappedRowIndex","outputRowHeight","outputRow","from","forEach","cell","cellIndex","cellLines","wrapCell","columns","width","wrapWord","paddedCellLines","cellLine","cellLineIndex"],"mappings":"AAAA;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,sBAAR,GAAiC,KAAK,CAAtC;;AACA,IAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,MAAD,EAAY;AACnC,SAAO,IAAIC,KAAJ,CAAUD,MAAV,EAAkBE,IAAlB,CAAuB,EAAvB,CAAP;AACH,CAFD;;AAGA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAAQC,SAAR,EAAmBC,YAAnB,EAAoC;AAC1D,MAAQC,iBAAR,GAA8BD,YAA9B,CAAQC,iBAAR;AACA,MAAMC,cAAc,GAAGH,SAAS,GAAGD,KAAK,CAACJ,MAAzC;;AACA,MAAIO,iBAAiB,KAAK,KAA1B,EAAiC;AAC7B,wCAAWH,KAAX,sBAAqBL,kBAAkB,CAACS,cAAD,CAAvC;AACH;;AACD,MAAID,iBAAiB,KAAK,QAA1B,EAAoC;AAChC,wCAAWR,kBAAkB,CAACS,cAAD,CAA7B,sBAAkDJ,KAAlD;AACH;;AACD,sCACOL,kBAAkB,CAACU,IAAI,CAACC,KAAL,CAAWF,cAAc,GAAG,CAA5B,CAAD,CADzB,sBAEOJ,KAFP,sBAGOL,kBAAkB,CAACU,IAAI,CAACE,IAAL,CAAUH,cAAc,GAAG,CAA3B,CAAD,CAHzB;AAKH,CAdD;;AAeA,IAAMI,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAW;AAAA;;AACvB,SAAO,YAAGC,MAAH,gCAAaD,KAAb,EAAP;AACH,CAFD;;AAGA,IAAMjB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACmB,YAAD,EAAeC,UAAf,EAA2BC,MAA3B,EAAsC;AACjE,MAAMC,UAAU,GAAGH,YAAY,CAAC,CAAD,CAAZ,CAAgBf,MAAnC;AACA,MAAMmB,UAAU,GAAGJ,YAAY,CAACK,GAAb,CAAiB,UAACC,WAAD,EAAcC,gBAAd,EAAmC;AACnE,QAAMC,eAAe,GAAGP,UAAU,CAACM,gBAAD,CAAlC;AACA,QAAME,SAAS,GAAGvB,KAAK,CAACwB,IAAN,CAAW;AAAEzB,MAAAA,MAAM,EAAEuB;AAAV,KAAX,EAAwC,YAAM;AAC5D,aAAO,IAAItB,KAAJ,CAAUiB,UAAV,EAAsBhB,IAAtB,CAA2B,EAA3B,CAAP;AACH,KAFiB,CAAlB;AAGAmB,IAAAA,WAAW,CAACK,OAAZ,CAAoB,UAACC,IAAD,EAAOC,SAAP,EAAqB;AACrC,UAAMC,SAAS,GAAG,CAAC,GAAGhC,UAAU,CAACiC,QAAf,EAAyBH,IAAzB,EAA+BV,MAAM,CAACc,OAAP,CAAeH,SAAf,EAA0BI,KAAzD,EAAgEf,MAAM,CAACc,OAAP,CAAeH,SAAf,EAA0BK,QAA1F,CAAlB;AACA,UAAMC,eAAe,GAAG/B,iBAAiB,CAAC0B,SAAD,EAAYN,eAAZ,EAA6BN,MAAM,CAACc,OAAP,CAAeH,SAAf,CAA7B,CAAzC;AACAM,MAAAA,eAAe,CAACR,OAAhB,CAAwB,UAACS,QAAD,EAAWC,aAAX,EAA6B;AACjDZ,QAAAA,SAAS,CAACY,aAAD,CAAT,CAAyBR,SAAzB,IAAsCO,QAAtC;AACH,OAFD;AAGH,KAND;AAOA,WAAOX,SAAP;AACH,GAbkB,CAAnB;AAcA,SAAOZ,OAAO,CAACO,UAAD,CAAd;AACH,CAjBD;;AAkBAzB,OAAO,CAACE,sBAAR,GAAiCA,sBAAjC","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mapDataUsingRowHeights = void 0;\nconst wrapCell_1 = require(\"./wrapCell\");\nconst createEmptyStrings = (length) => {\n    return new Array(length).fill('');\n};\nconst padCellVertically = (lines, rowHeight, columnConfig) => {\n    const { verticalAlignment } = columnConfig;\n    const availableLines = rowHeight - lines.length;\n    if (verticalAlignment === 'top') {\n        return [...lines, ...createEmptyStrings(availableLines)];\n    }\n    if (verticalAlignment === 'bottom') {\n        return [...createEmptyStrings(availableLines), ...lines];\n    }\n    return [\n        ...createEmptyStrings(Math.floor(availableLines / 2)),\n        ...lines,\n        ...createEmptyStrings(Math.ceil(availableLines / 2)),\n    ];\n};\nconst flatten = (array) => {\n    return [].concat(...array);\n};\nconst mapDataUsingRowHeights = (unmappedRows, rowHeights, config) => {\n    const tableWidth = unmappedRows[0].length;\n    const mappedRows = unmappedRows.map((unmappedRow, unmappedRowIndex) => {\n        const outputRowHeight = rowHeights[unmappedRowIndex];\n        const outputRow = Array.from({ length: outputRowHeight }, () => {\n            return new Array(tableWidth).fill('');\n        });\n        unmappedRow.forEach((cell, cellIndex) => {\n            const cellLines = (0, wrapCell_1.wrapCell)(cell, config.columns[cellIndex].width, config.columns[cellIndex].wrapWord);\n            const paddedCellLines = padCellVertically(cellLines, outputRowHeight, config.columns[cellIndex]);\n            paddedCellLines.forEach((cellLine, cellLineIndex) => {\n                outputRow[cellLineIndex][cellIndex] = cellLine;\n            });\n        });\n        return outputRow;\n    });\n    return flatten(mappedRows);\n};\nexports.mapDataUsingRowHeights = mapDataUsingRowHeights;\n//# sourceMappingURL=mapDataUsingRowHeights.js.map"]},"metadata":{},"sourceType":"script"}