{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar calculateCellWidths_1 = require(\"./calculateCellWidths\");\n/**\n * Produces an array of values that describe the largest value length (width) in every column.\n */\n\n\nexports.default = function (rows) {\n  var columnWidths = new Array(rows[0].length).fill(0);\n  rows.forEach(function (row) {\n    var cellWidths = (0, calculateCellWidths_1.calculateCellWidths)(row);\n    cellWidths.forEach(function (cellWidth, cellIndex) {\n      columnWidths[cellIndex] = Math.max(columnWidths[cellIndex], cellWidth);\n    });\n  });\n  return columnWidths;\n};","map":{"version":3,"sources":["C:/Users/dikra/Downloads/paper-dashboard-react-main/paper-dashboard-react-main/node_modules/table/dist/src/calculateColumnWidths.js"],"names":["Object","defineProperty","exports","value","calculateCellWidths_1","require","default","rows","columnWidths","Array","length","fill","forEach","row","cellWidths","calculateCellWidths","cellWidth","cellIndex","Math","max"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAMC,qBAAqB,GAAGC,OAAO,CAAC,uBAAD,CAArC;AACA;AACA;AACA;;;AACAH,OAAO,CAACI,OAAR,GAAkB,UAACC,IAAD,EAAU;AACxB,MAAMC,YAAY,GAAG,IAAIC,KAAJ,CAAUF,IAAI,CAAC,CAAD,CAAJ,CAAQG,MAAlB,EAA0BC,IAA1B,CAA+B,CAA/B,CAArB;AACAJ,EAAAA,IAAI,CAACK,OAAL,CAAa,UAACC,GAAD,EAAS;AAClB,QAAMC,UAAU,GAAG,CAAC,GAAGV,qBAAqB,CAACW,mBAA1B,EAA+CF,GAA/C,CAAnB;AACAC,IAAAA,UAAU,CAACF,OAAX,CAAmB,UAACI,SAAD,EAAYC,SAAZ,EAA0B;AACzCT,MAAAA,YAAY,CAACS,SAAD,CAAZ,GAA0BC,IAAI,CAACC,GAAL,CAASX,YAAY,CAACS,SAAD,CAArB,EAAkCD,SAAlC,CAA1B;AACH,KAFD;AAGH,GALD;AAMA,SAAOR,YAAP;AACH,CATD","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst calculateCellWidths_1 = require(\"./calculateCellWidths\");\n/**\n * Produces an array of values that describe the largest value length (width) in every column.\n */\nexports.default = (rows) => {\n    const columnWidths = new Array(rows[0].length).fill(0);\n    rows.forEach((row) => {\n        const cellWidths = (0, calculateCellWidths_1.calculateCellWidths)(row);\n        cellWidths.forEach((cellWidth, cellIndex) => {\n            columnWidths[cellIndex] = Math.max(columnWidths[cellIndex], cellWidth);\n        });\n    });\n    return columnWidths;\n};\n//# sourceMappingURL=calculateColumnWidths.js.map"]},"metadata":{},"sourceType":"script"}