{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\aousw\\\\Desktop\\\\paper-dashboard-react-main\\\\paper-dashboard-react-main\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\slicedToArray.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapWord = void 0;\n\nvar slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\n\nvar strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\n\nvar calculateStringLengths = function calculateStringLengths(input, size) {\n  var subject = (0, strip_ansi_1.default)(input);\n  var chunks = []; // https://regex101.com/r/gY5kZ1/1\n\n  var re = new RegExp('(^.{1,' + String(Math.max(size, 1)) + '}(\\\\s+|$))|(^.{1,' + String(Math.max(2, size - 1) - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n\n  do {\n    var chunk = void 0;\n    var match = re.exec(subject);\n\n    if (match) {\n      chunk = match[0];\n      subject = subject.slice(chunk.length);\n      var trimmedLength = chunk.trim().length;\n      var offset = chunk.length - trimmedLength;\n      chunks.push([trimmedLength, offset]);\n    } else {\n      chunk = subject.slice(0, size);\n      subject = subject.slice(size);\n      chunks.push([chunk.length, 0]);\n    }\n  } while (subject.length);\n\n  return chunks;\n};\n\nvar wrapWord = function wrapWord(input, size) {\n  var result = [];\n  var startIndex = 0;\n  calculateStringLengths(input, Math.max(size, 1)).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        length = _ref2[0],\n        offset = _ref2[1];\n\n    result.push((0, slice_ansi_1.default)(input, startIndex, startIndex + length));\n    startIndex += length + offset;\n  });\n  return result;\n};\n\nexports.wrapWord = wrapWord;","map":{"version":3,"sources":["C:/Users/aousw/Desktop/paper-dashboard-react-main/paper-dashboard-react-main/node_modules/table/dist/src/wrapWord.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","wrapWord","slice_ansi_1","require","strip_ansi_1","calculateStringLengths","input","size","subject","default","chunks","re","RegExp","String","Math","max","chunk","match","exec","slice","length","trimmedLength","trim","offset","push","result","startIndex","forEach"],"mappings":"AAAA;;;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,QAAR,GAAmB,KAAK,CAAxB;;AACA,IAAMC,YAAY,GAAGR,eAAe,CAACS,OAAO,CAAC,YAAD,CAAR,CAApC;;AACA,IAAMC,YAAY,GAAGV,eAAe,CAACS,OAAO,CAAC,YAAD,CAAR,CAApC;;AACA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC5C,MAAIC,OAAO,GAAG,CAAC,GAAGJ,YAAY,CAACK,OAAjB,EAA0BH,KAA1B,CAAd;AACA,MAAMI,MAAM,GAAG,EAAf,CAF4C,CAG5C;;AACA,MAAMC,EAAE,GAAG,IAAIC,MAAJ,CAAW,WAAWC,MAAM,CAACC,IAAI,CAACC,GAAL,CAASR,IAAT,EAAe,CAAf,CAAD,CAAjB,GAAuC,mBAAvC,GAA6DM,MAAM,CAACC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYR,IAAI,GAAG,CAAnB,IAAwB,CAAzB,CAAnE,GAAiG,wBAA5G,CAAX;;AACA,KAAG;AACC,QAAIS,KAAK,SAAT;AACA,QAAMC,KAAK,GAAGN,EAAE,CAACO,IAAH,CAAQV,OAAR,CAAd;;AACA,QAAIS,KAAJ,EAAW;AACPD,MAAAA,KAAK,GAAGC,KAAK,CAAC,CAAD,CAAb;AACAT,MAAAA,OAAO,GAAGA,OAAO,CAACW,KAAR,CAAcH,KAAK,CAACI,MAApB,CAAV;AACA,UAAMC,aAAa,GAAGL,KAAK,CAACM,IAAN,GAAaF,MAAnC;AACA,UAAMG,MAAM,GAAGP,KAAK,CAACI,MAAN,GAAeC,aAA9B;AACAX,MAAAA,MAAM,CAACc,IAAP,CAAY,CAACH,aAAD,EAAgBE,MAAhB,CAAZ;AACH,KAND,MAOK;AACDP,MAAAA,KAAK,GAAGR,OAAO,CAACW,KAAR,CAAc,CAAd,EAAiBZ,IAAjB,CAAR;AACAC,MAAAA,OAAO,GAAGA,OAAO,CAACW,KAAR,CAAcZ,IAAd,CAAV;AACAG,MAAAA,MAAM,CAACc,IAAP,CAAY,CAACR,KAAK,CAACI,MAAP,EAAe,CAAf,CAAZ;AACH;AACJ,GAfD,QAeSZ,OAAO,CAACY,MAfjB;;AAgBA,SAAOV,MAAP;AACH,CAtBD;;AAuBA,IAAMT,QAAQ,GAAG,SAAXA,QAAW,CAACK,KAAD,EAAQC,IAAR,EAAiB;AAC9B,MAAMkB,MAAM,GAAG,EAAf;AACA,MAAIC,UAAU,GAAG,CAAjB;AACArB,EAAAA,sBAAsB,CAACC,KAAD,EAAQQ,IAAI,CAACC,GAAL,CAASR,IAAT,EAAe,CAAf,CAAR,CAAtB,CAAiDoB,OAAjD,CAAyD,gBAAsB;AAAA;AAAA,QAApBP,MAAoB;AAAA,QAAZG,MAAY;;AAC3EE,IAAAA,MAAM,CAACD,IAAP,CAAY,CAAC,GAAGtB,YAAY,CAACO,OAAjB,EAA0BH,KAA1B,EAAiCoB,UAAjC,EAA6CA,UAAU,GAAGN,MAA1D,CAAZ;AACAM,IAAAA,UAAU,IAAIN,MAAM,GAAGG,MAAvB;AACH,GAHD;AAIA,SAAOE,MAAP;AACH,CARD;;AASA1B,OAAO,CAACE,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wrapWord = void 0;\nconst slice_ansi_1 = __importDefault(require(\"slice-ansi\"));\nconst strip_ansi_1 = __importDefault(require(\"strip-ansi\"));\nconst calculateStringLengths = (input, size) => {\n    let subject = (0, strip_ansi_1.default)(input);\n    const chunks = [];\n    // https://regex101.com/r/gY5kZ1/1\n    const re = new RegExp('(^.{1,' + String(Math.max(size, 1)) + '}(\\\\s+|$))|(^.{1,' + String(Math.max(2, size - 1) - 1) + '}(\\\\\\\\|/|_|\\\\.|,|;|-))');\n    do {\n        let chunk;\n        const match = re.exec(subject);\n        if (match) {\n            chunk = match[0];\n            subject = subject.slice(chunk.length);\n            const trimmedLength = chunk.trim().length;\n            const offset = chunk.length - trimmedLength;\n            chunks.push([trimmedLength, offset]);\n        }\n        else {\n            chunk = subject.slice(0, size);\n            subject = subject.slice(size);\n            chunks.push([chunk.length, 0]);\n        }\n    } while (subject.length);\n    return chunks;\n};\nconst wrapWord = (input, size) => {\n    const result = [];\n    let startIndex = 0;\n    calculateStringLengths(input, Math.max(size, 1)).forEach(([length, offset]) => {\n        result.push((0, slice_ansi_1.default)(input, startIndex, startIndex + length));\n        startIndex += length + offset;\n    });\n    return result;\n};\nexports.wrapWord = wrapWord;\n//# sourceMappingURL=wrapWord.js.map"]},"metadata":{},"sourceType":"script"}